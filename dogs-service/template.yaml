AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Dogs Service - Manages adding and retrieving dogs for users.

Parameters:
  Stage:
    Type: String
    Default: "prod"

Globals:
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

  Function:
    Handler: app.lambda_handler
    Runtime: python3.13
    Timeout: 30
    Tracing: Active
    Architectures:
      - x86_64
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_SAMPLE_RATE: "0.1"
        POWERTOOLS_LOGGER_LOG_EVENT: true

Resources:
  DogsImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Stage}-images"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000

  DogsServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-lambda"
      CodeUri: dogs_service_lambda/
      Description: Lambda function for Dogs Service
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DogsTable
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: dogs-service
          DYNAMODB_ENDPOINT: ""
          DOGS_TABLE_NAME: !Ref DogsTable
          S3_ENDPOINT: ""
          S3_PRESIGN_ENDPOINT: ""
          DOGS_IMAGES_BUCKET: !Ref DogsImageBucket
      Events:
        GetUserDogs:
          Type: Api
          Properties:
            Path: /users/{user_id}/dogs
            Method: GET
        PostUserDogs:
          Type: Api
          Properties:
            Path: /users/{user_id}/dogs
            Method: POST
        PostDogImageUpload:
          Type: Api
          Properties:
            Path: /users/{user_id}/dogs/{dog_id}/images
            Method: POST
        GetHealth:
          Type: Api
          Properties:
            Path: /health
            Method: GET
  
  DogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-${Stage}-db"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
  
Outputs:
  DogsImageBucket:
    Description: S3 Bucket for storing dog images
    Value: !Ref DogsImageBucket
  DogsServiceApi:
    Description: API Gateway endpoint URL for Prod stage for Dogs Service
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  DogsServiceFunction:
    Description: Dogs Service Lambda Function ARN
    Value: !GetAtt DogsServiceFunction.Arn
  DogsServiceFunctionIamRole:
    Description: Implicit IAM Role created for Dogs Service function
    Value: !GetAtt DogsServiceFunctionRole.Arn
